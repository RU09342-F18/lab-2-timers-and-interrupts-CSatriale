/* --COPYRIGHT--,BSD_EX
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *******************************************************************************
 *
 *                       MSP430 CODE EXAMPLE DISCLAIMER
 *
 * MSP430 code examples are self-contained low-level programs that typically
 * demonstrate a single peripheral function or device feature in a highly
 * concise manner. For this the code may rely on the device's power-on default
 * register values and settings such as the clock configuration and care must
 * be taken when combining code from several examples to avoid potential side
 * effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
 * for an API functional library-approach to peripheral configuration.
 *
 * --/COPYRIGHT--*/
//******************************************************************************
//  Description; Use the button on P1.3 to set the rate of the P1.0 LED blinking
//
//                MSP430G2xx3
//             -----------------
//         /|\|              XIN|-
//          | |                 |
//          --|RST          XOUT|-
//            |                 |
//   Button-->|P1.3         P1.0|-->LED
//
//  D. Dang
//  Texas Instruments, Inc
//  December 2010
//   Built with CCS Version 4.2.0 and IAR Embedded Workbench Version: 5.10
//******************************************************************************
#include <msp430.h>

int main(void)
{
    BCSCTL3 = LFXT1S_2; // enables ACLK
    WDTCTL = WDTPW + WDTHOLD; // stops watchdog timer
 
    P1DIR |= BIT0; // sets pin1 as output
    P1SEL2 &= ~BIT0; // sets pin1 as in/out
    P1OUT &= ~BIT0; // pin1 LED off
    
    P1DIR &= ~BIT3; // sets pin1.3 as input
    P1SEL &= ~BIT3; // pin 1.3 in/out
    P1SEL2 &= ~BIT3; // pin 1.3 as inout
    P1REN |= BIT3; // enables pin 1.3 resistor
    P1OUT |= BIT3; // pullup resistor

    P1IES |= BIT3; // generates on high to low
    P1IE |= BIT3; // enables pin1.3 interrupt 
    
    TACTL = TASSEL_1 + ID_3 + MC_1 + TACLR + TAIE; // sets parameters for clock
    TACCR0 = timerConvert(10, 8);

    _BIS_SR(LPM3_bits + GIE); //enters low power mode
}

#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
    if (P1IES & BIT3) {   //button press
        TACTL = TASSEL_1 + ID_3 + MC_2 + TACLR; //sets parameters for clock
    } else {    //no button press
        TACCR0 = TAR >> 1; //change timer
        TACTL = TASSEL_1 + ID_3 + MC_1 + TACLR + TAIE; //sets clock parameters
    }

    P1IES ^= BIT3; //toggles pin1.3
    P1IFG &= ~BIT3; //clears interrupt
}

#pragma vector=TIMER0_A1_VECTOR
__interrupt void TIMER0_A1(void)
{
    
    switch (__even_in_range(TAIV, 10)) {   //resets flags
    case 10:
      P1OUT ^= BIT0;  // Timer overflow
        break;
    }
}
